stages:
  - build
  - package
  - Cross-Cloud
  - Cross-Project

before_script:
  - export CI_COMMIT_SHA_SHORT=$(echo ${CI_COMMIT_SHA} | cut -c -8)
  - mkdir ./auth

compile:
  image: golang:1.8.1
  stage: build
  script:
    - ln -s /builds /go/src/github.com
    - cd /go/src/github.com/coredns/coredns
    - go get github.com/mholt/caddy
    - make -j $(getconf _NPROCESSORS_ONLN)
        -f Makefile.release build-linux
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 5 weeks
    paths:
      - build/
      
build-e2e:
  stage: build
  variables:
    COREDNS_DOCKER_REGISTRY: "${CI_REGISTRY_IMAGE}"
    COREDNS_DOCKER_IMAGE_TAG: "${CI_COMMIT_REF_SLUG}.job.${CI_JOB_ID}"
  script:
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build -t "$CI_REGISTRY_IMAGE/coredns-e2e:$COREDNS_DOCKER_IMAGE_TAG" ./e2e/
    - docker push "$CI_REGISTRY_IMAGE/coredns-e2e:$COREDNS_DOCKER_IMAGE_TAG"

.tar:
  stage: package
  image: golang:1.8.1
  script:
    - make -f Makefile.release tar
  dependencies:
    - compile
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    untracked: true
    expire_in: 4 weeks
    paths:
      - release/
      
container:
  stage: package
  image: docker:17.05.0
  script:
    - IMAGE_TAG=${CI_COMMIT_REF_NAME}.${CI_COMMIT_SHA_SHORT}.${CI_JOB_ID}
    - cp build/Linux/coredns .
    - docker login -u "gitlab-ci-token" -p "$CI_JOB_TOKEN" $CI_REGISTRY
    - docker build --pull -t "$CI_REGISTRY_IMAGE:$IMAGE_TAG" .
    - docker push "$CI_REGISTRY_IMAGE:$IMAGE_TAG"
    - echo export COREDNS_IMAGE=$CI_REGISTRY_IMAGE | tee release.env
    - echo export COREDNS_TAG=$IMAGE_TAG | tee -a release.env
    - cat release.env
  dependencies:
    - compile
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - release.env

# Deploy Template used for Cross-Cloud API Call
.cross-cloud: &cross-cloud
  allow_failure: false
  image: buildpack-deps:stretch
  stage: Cross-Cloud
  variables:
    KUBERNETES_BRANCH: MUST BE SET
    CLOUD: MUST BE SET
  script:
    - >
      if [ "$BUILD_TRIGGER" == "yes" ]; then
        exit 0
      else
        apt update && apt install -y jq
        PROJECT_PIPELINE=$(curl -X POST -F token=$CROSS_CLOUD_CI_JOB_TOKEN -F ref=stable-v0.2.0-integrations -F "variables[KUBERNETES_BRANCH]="${KUBERNETES_BRANCH}"" -F "variables[CLOUD]="${CLOUD}"" https://gitlab.cncf.ci/api/v4/projects/2/trigger/pipeline | jq '.id')
        # PROJECT_PIPELINE=$(curl -X POST -F token=$CI_JOB_TOKEN -F ref=stable-v0.2.0-integrations https://gitlab.cncf.ci/api/v4/projects/2/trigger/pipeline | jq '.id')

        echo 'Wait for Cluster "FIX ME / HACK"'
        until [ "$JOB_STATUS" == '"success"' ]; do JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "https://gitlab.cncf.ci/api/v4/projects/2/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="Kubernetes-Deploy") | .status')" ; sleep 0.5 ; done ; echo 'Cluster Ready'
        PROJECT_JOB=$(curl --header "PRIVATE-TOKEN:${TOKEN}" "https://gitlab.cncf.ci/api/v4/projects/2/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="Kubernetes-Deploy") | .id')
        export BASE_URL=${BASE_URL:-$(echo $CI_PROJECT_URL |  cut -d'/' -f1-3)}
        curl -s -o kubeconfig -L "$BASE_URL/cncf/cross-cloud/-/jobs/${PROJECT_JOB}/artifacts/raw/data/$CLOUD-stable-v0-2-0-integrations/kubeconfig"
        cat ./kubeconfig | base64 | tee ./kubeconfig

      fi
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - kubeconfig


# Deploy Template used for Cross-Project API Call
.cross-project: &cross-project
  allow_failure: false
  image: buildpack-deps:stretch
  stage: Cross-Project
  variables:
    COREDNS_BRANCH: CAN BE SET
    COREDNS_COMMIT: CAN BE SET
    CLOUD: MUST BE SET
  script:
    - >
      if [ "$BUILD_TRIGGER" == "yes" ]; then
        exit 0
      else
        echo 'Trigger Cross-Project'
        apt update && apt install -y jq
        KUBECONFIG=$(cat ./kubeconfig | tr -d '\n')
        PROJECT_PIPELINE=$(curl -X POST -F token=$CROSS_PROJECT_CI_JOB_TOKEN -F ref=master -F "variables[BRANCH]="${BRANCH}"" -F "variables[COMMIT]="${COMMIT}"" -F "variables[SOURCE]="${CI_PIPELINE_ID}"" -F "variables[DISABLE_SOURCE]="${DISABLE_SOURCE}"" -F "variables[KUBECONFIG]="${KUBECONFIG}"" -F "variables[ORG]="${CI_PROJECT_NAMESPACE}"" -F "variables[PROJECT]="${CI_PROJECT_NAME}"" -F "variables[PROJECT_ID]="${CI_PROJECT_ID}"" -F "variables[PROJECT_TOKEN]="${COREDNS_PROJECT_TOKEN}"" https://gitlab.cncf.ci/api/v4/projects/45/trigger/pipeline | jq '.id')
        # PROJECT_PIPELINE=$(curl -X POST -F token=$CI_JOB_TOKEN -F ref=master https://gitlab.cncf.ci/api/v4/projects/45/trigger/pipeline | jq '.id')
      
        echo 'Verify Project Deployment'
        until [ "$JOB_STATUS" == '"success"' ]; do JOB_STATUS="$(curl -s --header "PRIVATE-TOKEN:${TOKEN}" "https://gitlab.cncf.ci/api/v4/projects/45/pipelines/${PROJECT_PIPELINE}/jobs?scope=success" | jq '.[] | select(.name=="Project-Deploy") | .status')" ; sleep 0.5 ; done ; echo 'Cluster Ready'
        
      fi
  artifacts:
    name: "${CI_JOB_NAME}_${CI_COMMIT_REF_NAME}"
    expire_in: 5 weeks
    paths:
      - kubeconfig


Cross-Cloud:
  <<: *cross-cloud
  variables:
    CLOUD: "${CLOUD}"
    KUBERNETES_BRANCH: "${KUBERNETES_BRANCH}"

Cross-Project:
  <<: *cross-project
  variables:
    CLOUD: "${CLOUD}"
    COREDNS_COMMIT: "${COREDNS_COMMIT}"
